
from time import sleep
import RPi.GPIO as GPIO
import time
GPIO.setwarnings(False)

aled=16
Bled=35
cled=36
dled=37
eled=40

RoAPin = 11    # pin11
RoBPin = 12    # pin12
RoSPin = 13    # pin13

globalCounter = 0

flag = 0
Last_RoB_Status = 0
Current_RoB_Status = 0

def setup():
	GPIO.setmode(GPIO.BOARD)       # Numbers GPIOs by physical location
	GPIO.setup(RoAPin, GPIO.IN)    # input mode
	GPIO.setup(RoBPin, GPIO.IN)
	GPIO.setup(aled, GPIO.OUT)
	GPIO.setup(Bled, GPIO.OUT)
	GPIO.setup(cled, GPIO.OUT)
	GPIO.setup(dled, GPIO.OUT)
	GPIO.setup(eled, GPIO.OUT)
	GPIO.setup(RoSPin,GPIO.IN,pull_up_down=GPIO.PUD_UP)
	rotaryClear()

def lightson (globalCounter):
        if globalCounter == 1:
            GPIO.output(aled, GPIO.HIGH)
        elif globalCounter == 2:
            GPIO.output(Bled, GPIO.HIGH)
        elif globalCounter == 3:
            GPIO.output(cled, GPIO.HIGH)
        elif globalCounter == 4:
            GPIO.output(dled, GPIO.HIGH)
        elif globalCounter == 5:
            GPIO.output(eled, GPIO.HIGH)
        elif globalCounter == 6:
            GPIO.output(aled, GPIO.LOW)
            GPIO.output(Bled, GPIO.LOW)
            GPIO.output(cled, GPIO.LOW)
            GPIO.output(dled, GPIO.LOW)
            GPIO.output(eled, GPIO.LOW)
        elif globalCounter == 7:
            GPIO.output(aled, GPIO.HIGH)
        elif globalCounter == 8:
            GPIO.output(Bled, GPIO.HIGH)
        elif globalCounter == 9:
            GPIO.output(cled, GPIO.HIGH)
        elif globalCounter == 10:
            GPIO.output(dled, GPIO.HIGH)
        elif globalCounter == 11:
            GPIO.output(eled, GPIO.HIGH)
        
            

def lightsoff (globalCounter):
        if globalCounter == 0:
            GPIO.output(aled, GPIO.LOW)
        elif globalCounter == 1:
            GPIO.output(Bled, GPIO.LOW)
        elif globalCounter == 2:
            GPIO.output(cled, GPIO.LOW)
        elif globalCounter == 3:
            GPIO.output(dled, GPIO.LOW)
        elif globalCounter == 4:
            GPIO.output(eled, GPIO.LOW)   
        elif globalCounter == 5:
            GPIO.output(aled, GPIO.LOW)
        elif globalCounter == 6:
            GPIO.output(Bled, GPIO.LOW)
        elif globalCounter == 7:
            GPIO.output(cled, GPIO.LOW)
        elif globalCounter == 8:
            GPIO.output(dled, GPIO.LOW)
        elif globalCounter == 9:
            GPIO.output(eled, GPIO.LOW)
        elif globalCounter == 10:
            GPIO.output(dled, GPIO.LOW)

def rotaryDeal():
	global flag
	global Last_RoB_Status
	global Current_RoB_Status
	global globalCounter
	Last_RoB_Status = GPIO.input(RoBPin)
	while(not GPIO.input(RoAPin)):
		Current_RoB_Status = GPIO.input(RoBPin)
		flag = 1
	if flag == 1:
		flag = 0
		if (Last_RoB_Status == 0) and (Current_RoB_Status == 1):
			globalCounter = globalCounter + 1
			print (globalCounter)
			lightson(globalCounter)
		if (Last_RoB_Status == 1) and (Current_RoB_Status == 0):
			globalCounter = globalCounter - 1
			print (globalCounter)
			lightsoff(globalCounter)

def clear(ev=None):
     globalCounter = 0
     print ('globalCounter = %d') % globalCounter
     time.sleep(1)

def rotaryClear():
        GPIO.add_event_detect(RoSPin, GPIO.FALLING, callback=clear) # wait for falling


def loop():
	global globalCounter
	while True:
		rotaryDeal()
#		print 'globalCounter = %d' % globalCounter

def destroy():
	GPIO.cleanup()             # Release resource

if __name__ == '__main__':     # Program start from here
	setup()
	try:
		loop()
	except KeyboardInterrupt:  # When 'Ctrl+C' is pressed, the child program destroy() will be  executed.
		destroy()
